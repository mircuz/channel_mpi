!USE rtchecks
WRITE

<*
  	/************************************************************************************************
	 * 													      										*
	 * 				Determine data for Pencil Decomposition and Scatter in MPI Space				*
	 * 													      										*
	 ************************************************************************************************
											     	  					  Author: Dr. Mirco Meazzo */
  
  #include "fft_support.h"
  int nfast,nmid,nslow, nx,ny,nz;
  nx = nx_+1;		ny = ny_+3;	nz = nz_*2+1;
  int nzd = nzd_;
  int nxd = nxd_;	

  // Length of the array along directions
  int i_length = nxd;
  int j_length = ny;
  int k_length = nzd;

  // TOTAL Modes
  nfast = nxd;
  nmid = ny;
  nslow = nzd;

  // Algorithm to factor Nprocs into roughly cube roots
  int npfast,npmid,npslow;
  npfast= 1;
  int npmidslow = size / npfast;
  npmid = (int) sqrt(npmidslow);
  while (npmid < npmidslow) {
    if (npmidslow % npmid == 0) break;
    npmid++;
  }
  npslow = size / npfast / npmid;


  if (rank == 0) {
  	  printf("\n========================================================================================\n"
  			  "\t2D FFT with %dx%dx%d total modes, %dx%dx%d investigated on %d procs, %dx%dx%d grid\t\n"
  			"========================================================================================\n\n",
  			  nfast,nmid,nslow,nx,ny,nz,size,npfast,npmid,npslow);
    }

  if ((ny/npmid) < 1) {
	  perror("\n\n\nInvalid Y Grid decomposition\nAborting simulation...\n\n\n");
	  abort();
  }
  if ((nz/npslow) < 1) {
 	  perror("\n\n\nInvalid Z Grid decomposition\nAborting simulation...\n\n\n");
 	  abort();
   }

  /******************************************** Remap Variables *******************************************/
  // partitioning in x-pencil
  int ipfast = rank % npfast;
  int ipmid = (rank/npfast) % npmid;
  int ipslow = rank / (npfast*npmid);
  int in_ilo, in_ihi, in_jlo, in_jhi, in_klo, in_khi;

  in_ilo = (int) 1.0*ipfast*nfast/npfast;						// I fast
  in_ihi = (int) 1.0*(ipfast+1)*nfast/npfast - 1;
  in_jlo = (int) 1.0*ipmid*nmid/npmid;							// J med
  in_jhi = (int) 1.0*(ipmid+1)*nmid/npmid - 1;
  in_klo = (int) 1.0*ipslow*nslow/npslow;						// K slow
  in_khi = (int) 1.0*(ipslow+1)*nslow/npslow - 1;

  printf("[X-PENCIL] (i,j,k order)\t"
		  "On rank %d the coordinates are: "
		  "(%d,%d,%d) -> (%d,%d,%d)\n", rank, in_ilo, in_jlo, in_klo, in_ihi, in_jhi, in_khi );

  nfast = nzd;
  nmid = nxd;
  nslow = ny;

  // partitioning in z-pencil
  int out_klo = (int) 1.0*ipfast*nfast/npfast;					// K fast
  int out_khi = (int) 1.0*(ipfast+1)*nfast/npfast - 1;
  int out_ilo = (int) 1.0*ipmid*nmid/npmid;						// I med
  int out_ihi = (int) 1.0*(ipmid+1)*nmid/npmid - 1;
  int out_jlo = (int) 1.0*ipslow*nslow/npslow;					// J slow
  int out_jhi = (int) 1.0*(ipslow+1)*nslow/npslow - 1;

  printf("[Z-PENCIL] (k,i,j order)\t"
		  "On rank %d the coordinates are: "
		  "(%d,%d,%d) -> (%d,%d,%d)\n", rank, out_ilo, out_jlo, out_klo, out_ihi, out_jhi, out_khi );

  void *remap_zpencil, *remap_xpencil, *remap_ypencil;
  int nqty, permute, memoryflag, sendsize, recvsize;
  nqty = 2;			// Use couples of real numbers per grid point
  permute = 2;  		// From x-contiguous to z-contiguous arrays
  memoryflag = 1;		// Self-allocate the buffers


  /******************************************* Size Variables ******************************************/
  int insize = (in_ihi-in_ilo+1) * (in_jhi-in_jlo+1) * (in_khi-in_klo+1);
  int outsize = (out_ihi-out_ilo+1) * (out_jhi-out_jlo+1) * (out_khi-out_klo+1);
  int remapsize = (insize > outsize) ? insize : outsize;
  int elem_per_proc = insize*2;

  // Alloc the arrays
  int* displs = (int *)malloc(size*sizeof(int));
  int* scounts = (int *)malloc(size*sizeof(int));
  int* receive = (int *)malloc(size*sizeof(int));
  int* displs_gather = (int *)malloc(size*sizeof(int));
  int* scounts_gather = (int *)malloc(size*sizeof(int));
  int* receive_gather = (int *)malloc(size*sizeof(int));

  // Setup matrix
  int *modes_per_proc = (int *) malloc(sizeof(int)*size);
  modes_per_proc[rank] = (in_jhi-in_jlo+1) * (in_khi-in_klo+1);
  MPI_Allgather(&modes_per_proc[rank],1,MPI_INT,modes_per_proc,1,MPI_INT, MPI_COMM_WORLD);
  // Scattering & Gathering parameters
  int offset=0;
  for (int i=0; i<size; ++i) {
  	  scounts[i] = modes_per_proc[i]*nxd*2;
  	  receive[i] = scounts[i];
  	  displs[i] = offset;
  	  offset += scounts[i];
  }


  /********************************** Setup asymetric factors for scattering **********************************/
  // Setup matrix
  int modes_per_proc_scat[size], displs_scat[size], scounts_scat[size], receive_scat[size];
  for (int i = 0; i < size; i++){
	  modes_per_proc_scat[i] = 0;
	  displs_scat[i] = 0;
  }
  // Set modes per processor
  cores_handler( nx*nz, size, modes_per_proc_scat);
  // Scattering parameters
  offset=0;
  for (int i=0; i<size; ++i) {
	  scounts_scat[i] = modes_per_proc_scat[i]*ny*2;
	  receive_scat[i] = scounts_scat[i];
  	  displs_scat[i] = offset ;
  	  offset += modes_per_proc_scat[i] *ny*2;
  }
  //printf("modes_ proc %d on rank %d\n", modes_per_proc[rank], rank);
  //printf("scoutn %d & disps %d on rank %d\n", scounts[rank], displs[rank], rank);
	localdim_ = scounts[rank];
*>
	
POINTER TO ARRAY(0..localdim-1) OF REAL u
POINTER TO ARRAY(0..localdim-1) OF REAL uu


