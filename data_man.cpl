!USE rtchecks
WRITE
<*
  /******************************************** Memory Alloc *******************************************/
  u_ = (FFT_SCALAR *) malloc(2*localdim_x_*sizeof(FFT_SCALAR));
  v_ = (FFT_SCALAR *) malloc(2*localdim_x_*sizeof(FFT_SCALAR));
  w_ = (FFT_SCALAR *) malloc(2*localdim_x_*sizeof(FFT_SCALAR));
  FFT_SCALAR *u_read = (FFT_SCALAR *) malloc(2*nx*ny*nz*sizeof(FFT_SCALAR));
  FFT_SCALAR *v_read = (FFT_SCALAR *) malloc(2*nx*ny*nz*sizeof(FFT_SCALAR));
  FFT_SCALAR *w_read = (FFT_SCALAR *) malloc(2*nx*ny*nz*sizeof(FFT_SCALAR));
  uu_ = (FFT_SCALAR *) malloc(2*localdim_x_*sizeof(FFT_SCALAR));
  uv_ = (FFT_SCALAR *) malloc(2*localdim_x_*sizeof(FFT_SCALAR));
  vv_ = (FFT_SCALAR *) malloc(2*localdim_x_*sizeof(FFT_SCALAR));
  vw_ = (FFT_SCALAR *) malloc(2*localdim_x_*sizeof(FFT_SCALAR));
  ww_ = (FFT_SCALAR *) malloc(2*localdim_x_*sizeof(FFT_SCALAR));
  uw_ = (FFT_SCALAR *) malloc(2*localdim_x_*sizeof(FFT_SCALAR));
  FFT_SCALAR *sendbuf = (FFT_SCALAR *) malloc(2*localdim_x_*sizeof(FFT_SCALAR));
  FFT_SCALAR *recvbuf = (FFT_SCALAR *) malloc(2*localdim_x_*sizeof(FFT_SCALAR));

  if ((u_||u_read||v_||v_read||w_||w_read||uu_||uv_||vv_||vw_||ww_||uw_||sendbuf||recvbuf) == NULL) {
	  perror(".:Error while allocating memory for remapping variables:.\n");
	  abort();
  }

  // Declare variables, on all procs, needed to Scatter data
  FFT_SCALAR *V, *U, *W, *U_read, *V_read, *W_read;

  // Allocate memory needed to Scatter data, only on the broadcaster
  // U
  U_read = (FFT_SCALAR*) malloc( nx*ny*nz*2* sizeof(FFT_SCALAR));
  U = (FFT_SCALAR*) malloc( 2*localdim_x_* sizeof(FFT_SCALAR));
  if( (U||U_read) == NULL) {
	  perror(".:Error while allocating broadcaster memory U:.\n");
	  abort();
  }
  if (rank == 0) {
	  read_data(nx, ny, nz, U_read, "u.dat");
  }
  MPI_Barrier(MPI_COMM_WORLD);
  Alltoall( rank, size, z_jlo, z_jhi, z_ilo, z_ihi, nz, nx, U_read, U, 1);
  MPI_Barrier(MPI_COMM_WORLD);
  if(rank == 0) free(U_read);

  //V
  V_read = (FFT_SCALAR*) malloc( nx*ny*nz*2* sizeof(FFT_SCALAR));
  V = (FFT_SCALAR*) malloc( 2*localdim_x_* sizeof(FFT_SCALAR));
  if( (V||V_read) == NULL) {
	  perror(".:Error while allocating broadcaster memory V:.\n");
	  abort();
  }
  if (rank == 0) {
	  read_data(nx, ny, nz, V_read, "v.dat");
  }
  MPI_Barrier(MPI_COMM_WORLD);
  Alltoall( rank, size, z_jlo, z_jhi, z_ilo, z_ihi, nz, nx, V_read, V, 1);
  MPI_Barrier(MPI_COMM_WORLD);
  if(rank == 0) free(V_read);

  //W
  W_read = (FFT_SCALAR*) malloc( nx*ny*nz*2* sizeof(FFT_SCALAR));
  W = (FFT_SCALAR*) malloc( 2*localdim_x_* sizeof(FFT_SCALAR));
  if( (W||W_read) == NULL) {
	  perror(".:Error while allocating broadcaster memory W:.\n");
	  abort();
  }
  if (rank == 0) {
	  read_data(nx, ny, nz, W_read, "w.dat");
  }
  MPI_Barrier(MPI_COMM_WORLD);
  Alltoall( rank, size, z_jlo, z_jhi, z_ilo, z_ihi, nz, nx, W_read, W, 1);
  MPI_Barrier(MPI_COMM_WORLD);
  if(rank == 0) free(W_read);


  // Transpose in Y pencil u,v,w
  /*

	*/

*>
