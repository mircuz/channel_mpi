WRITE

<*	/****************************************************************************
	 * 													      					*
	 * 				2D FFT with Pencil Decomposition in MPI Space				*
	 * 													      					*
	 ****************************************************************************
											     	   Author: Dr. Mirco Meazzo */


  /************************************************ backward FFTs *********************************************/
  // ------------------------------------------- Setup z-Transpose --------------------------------------------
  remap3d_create( remap_comm , &remap_to_xpencil);
  permute = 1;  		// From z-contiguous to x-contiguous arrays
  remap3d_setup( remap_to_xpencil,
      		  	  z_klo,  z_khi, z_ilo,  z_ihi, z_jlo, z_jhi,
				  x_klo,  x_khi, x_ilo,  x_ihi,  x_jlo, x_jhi, 
      			  nqty, permute, memoryflag, &sendsize, &recvsize);
  // -----------------------------------------------------------------------------------------------------------
  // Apply AA in z-direction locally
  if (rank == 0) printf("Applying local z-antialiasing...\n");
  z_aliasing( (z_ihi-z_ilo+1), (z_jhi-z_jlo+1), nz, nzd, u_, U);
  z_aliasing( (z_ihi-z_ilo+1), (z_jhi-z_jlo+1), nz, nzd, v_, V);
  z_aliasing( (z_ihi-z_ilo+1), (z_jhi-z_jlo+1), nz, nzd, w_, W);
  MPI_Barrier(MPI_COMM_WORLD);		free(U);		free(V);		free(W);

  // Backward FFT
  if (rank == 0) printf("\tAA applied\n\nStarting Backward transformations...\n");
  //print_z_pencil( nzd, z_ilo, z_ihi, z_jlo, u_, rank, localdim_z_, 0);
  double timer_b1 = 0.0;
  timer_b1 -= MPI_Wtime();	*>
	FFT_z( u, localdim_z, 1)
	FFT_z( v, localdim_z, 1)
	FFT_z( w, localdim_z, 1)
<*MPI_Barrier( MPI_COMM_WORLD); 
  timer_b1 += MPI_Wtime();

  // Transpose in x-pencil
  double timer_trasp_z = 0.0, TIMER_TRASP_z = 0.0;
  timer_trasp_z -= MPI_Wtime();
    remap3d_remap(remap_to_xpencil,u_,u_,sendbuf,recvbuf);
    remap3d_remap(remap_to_xpencil,v_,v_,sendbuf,recvbuf);
    remap3d_remap(remap_to_xpencil,w_,w_,sendbuf,recvbuf);
  MPI_Barrier(remap_comm); 
  timer_trasp_z += MPI_Wtime();

  // Apply AA in x-direction locally
  if (rank == 0) printf("\tApplying local x-antialiasing\n");
  x_aliasing( nx, (x_jhi-x_jlo+1), (x_khi-x_klo+1), nxd, u_, u_);
  x_aliasing( nx, (x_jhi-x_jlo+1), (x_khi-x_klo+1), nxd, v_, v_);
  x_aliasing( nx, (x_jhi-x_jlo+1), (x_khi-x_klo+1), nxd, w_, w_);

  // Backward RFT
  double timer_b2 = 0.0;
  timer_b2 -= MPI_Wtime();  *>
	FFT_x( u, localdim_x, 1)
	FFT_x( v, localdim_x, 1)
	FFT_x( w, localdim_x, 1)
<*MPI_Barrier( MPI_COMM_WORLD); 
  timer_b2 += MPI_Wtime();
  //print_x_pencil(nxd, x_jlo, x_jhi, x_klo, u_, rank, localdim_x_, 3);

  remap3d_destroy(remap_to_xpencil);

  /************************************************ Convolutions *********************************************/
  double timer_conv = 0.0;
  timer_conv -= MPI_Wtime();  *>
LOOP FOR i=0 TO localdim_x
	uu[i] = u[i]*u[i]
	uv[i] = u[i]*v[i]
	vv[i] = v[i]*v[i]
	vw[i] = v[i]*w[i]
	uw[i] = u[i]*w[i]
	ww[i] = w[i]*w[i]
REPEAT LOOP
<*timer_conv += MPI_Wtime();
  if (rank == 0) printf("\tBackward FFTs completed\n\nStarting Forward transformations...\n");
  //print_x_pencil(nxd, x_jlo, x_jhi, x_klo, uu_, rank, localdim_x_, 3);

  /************************************************ forward FFTs *********************************************/
  // -------------------------------------------- Setup x-Transpose -----------------------------------------
  remap3d_create( remap_comm , &remap_to_zpencil);
  permute = 2; 		// From x-contiguous to z-contiguous arrays
  remap3d_setup( remap_to_zpencil,
		  	  	  x_ilo,  x_ihi, x_jlo,  x_jhi,  x_klo, x_khi,
				  z_ilo,  z_ihi, z_jlo,  z_jhi,  z_klo, z_khi,
				  nqty, permute, memoryflag, &sendsize, &recvsize);
  // -----------------------------------------------------------------------------------------------------------
  // Forward HFT
  double timer_f1 = 0.0;
  MPI_Barrier( MPI_COMM_WORLD);  
  timer_f1 -= MPI_Wtime();  *>
	FFT_x( uu, localdim_x, -1)
	FFT_x( uv, localdim_x, -1)
	FFT_x( vv, localdim_x, -1)
	FFT_x( vw, localdim_x, -1)
	FFT_x( uw, localdim_x, -1)
	FFT_x( ww, localdim_x, -1)
<*MPI_Barrier( MPI_COMM_WORLD);  
  timer_f1 += MPI_Wtime();
  
  // x-Dealiasing
  if (rank == 0) printf("\tRemoving alias in x direction\n");
  //x_dealiasing( localdim_x_/nxd, nx, nxd, u_);
    x_dealiasing( localdim_x_/nxd, nx, nxd, uu_);
	x_dealiasing( localdim_x_/nxd, nx, nxd, uv_);
	x_dealiasing( localdim_x_/nxd, nx, nxd, vv_);
	x_dealiasing( localdim_x_/nxd, nx, nxd, vw_);
	x_dealiasing( localdim_x_/nxd, nx, nxd, uw_);
	x_dealiasing( localdim_x_/nxd, nx, nxd, ww_);
  MPI_Barrier( MPI_COMM_WORLD);  
  //print_x_pencil(nx, x_jlo, x_jhi, x_klo, u_, rank, localdim_z_, 0);

  // Transpose to x-pencil
  double timer_trasp_x = 0.0, TIMER_TRASP_x = 0.0;
  timer_trasp_x -= MPI_Wtime();
  //remap3d_remap(remap_to_zpencil,u_,u_,sendbuf,recvbuf); 				//Attenzione a cosa si rimappa!!
    remap3d_remap(remap_to_zpencil,uu_,uu_,sendbuf,recvbuf);
    remap3d_remap(remap_to_zpencil,uv_,uv_,sendbuf,recvbuf);
    remap3d_remap(remap_to_zpencil,vv_,vv_,sendbuf,recvbuf);
    remap3d_remap(remap_to_zpencil,vw_,vw_,sendbuf,recvbuf);
    remap3d_remap(remap_to_zpencil,ww_,ww_,sendbuf,recvbuf);
    remap3d_remap(remap_to_zpencil,uw_,uw_,sendbuf,recvbuf);  
  MPI_Barrier(remap_comm);  
  timer_trasp_x += MPI_Wtime();
  //print_z_pencil( nzd, z_ilo, z_ihi, z_jlo, u_, rank, scounts[rank], 0);

  // Forward FFT
  double timer_f2 = 0.0;
  MPI_Barrier( MPI_COMM_WORLD);  
  timer_f2 -= MPI_Wtime();
*>
	FFT_z( uu, localdim_z, -1)
	FFT_z( uv, localdim_z, -1)
	FFT_z( vv, localdim_z, -1)
	FFT_z( vw, localdim_z, -1)
	FFT_z( uw, localdim_z, -1)
	FFT_z( ww, localdim_z, -1)
<*
  MPI_Barrier( MPI_COMM_WORLD);  
  timer_f2 += MPI_Wtime();

  // z-Dealiasing
  //z_dealiasing( (z_ihi-z_ilo+1), (z_jhi-z_jlo+1), nz, nzd, u_);
    z_dealiasing( (z_ihi-z_ilo+1), (z_jhi-z_jlo+1), nz, nzd, uu_);
	z_dealiasing( (z_ihi-z_ilo+1), (z_jhi-z_jlo+1), nz, nzd, uv_);
	z_dealiasing( (z_ihi-z_ilo+1), (z_jhi-z_jlo+1), nz, nzd, vv_);
	z_dealiasing( (z_ihi-z_ilo+1), (z_jhi-z_jlo+1), nz, nzd, vw_);
	z_dealiasing( (z_ihi-z_ilo+1), (z_jhi-z_jlo+1), nz, nzd, uw_);
	z_dealiasing( (z_ihi-z_ilo+1), (z_jhi-z_jlo+1), nz, nzd, ww_);
  //print_z_pencil( nz, fz_ilo, fz_ihi, fz_jlo, uu_, rank, finaldim_z_, 3);

  remap3d_destroy(remap_to_zpencil);

  /*********************************************** Y Transpose ********************************************/
  if (rank == 0) printf("\tForward FFTs completed\n\nRemapping into Y pencil\n");
  // Sanity check
  if ( z_ihi != fz_ihi || z_ilo != fz_ilo || z_jhi != fz_jhi || z_jlo != fz_jlo) {
  	  perror(".:Dimension mismatch among Z pencils:.");
	  abort();
  }
  // ------------------------------------------- Setup z-Transpose --------------------------------------------
  remap3d_create( remap_comm , &remap_to_ypencil);
  permute = 2;  		// From z-contiguous to y-contiguous arrays
  remap3d_setup( remap_to_xpencil,
      		  	  fz_klo,  fz_khi, fz_ilo,  fz_ihi, fz_jlo, fz_jhi,
				  y_klo,  y_khi, y_ilo,  y_ihi, y_jlo, y_jhi, 
      			  nqty, permute, memoryflag, &sendsize, &recvsize);
  // -----------------------------------------------------------------------------------------------------------
  double timer_trasp_y = 0.0, TIMER_TRASP_y=0.0;
  timer_trasp_y -= MPI_Wtime();
  //remap3d_remap(remap_to_ypencil,u_,u_,sendbuf,recvbuf); 	
  	remap3d_remap(remap_to_ypencil,uu_,uu_,sendbuf,recvbuf);
	remap3d_remap(remap_to_ypencil,uv_,uv_,sendbuf,recvbuf);
	remap3d_remap(remap_to_ypencil,vv_,vv_,sendbuf,recvbuf);
	remap3d_remap(remap_to_ypencil,vw_,vw_,sendbuf,recvbuf);
	remap3d_remap(remap_to_ypencil,uw_,uw_,sendbuf,recvbuf);
	remap3d_remap(remap_to_ypencil,ww_,ww_,sendbuf,recvbuf);
  timer_trasp_y += MPI_Wtime();
  MPI_Barrier(remap_comm);
  print_y_pencil( ny, y_ilo, y_khi, y_klo, u_, rank, dim_y_, 0);
  
  remap3d_destroy(remap_to_ypencil);

  /************************************************ Print Stats *********************************************/
  // Gather all stats
  double TIMER_b1, TIMER_b2, TIMER_f1, TIMER_f2, TIMER_conv;
  MPI_Allreduce(&timer_trasp_x, &TIMER_TRASP_x,1,MPI_DOUBLE,MPI_MAX,remap_comm);  
  MPI_Allreduce(&timer_trasp_z, &TIMER_TRASP_z,1,MPI_DOUBLE,MPI_MAX,remap_comm);  
  MPI_Allreduce(&timer_trasp_y, &TIMER_TRASP_y,1,MPI_DOUBLE,MPI_MAX,remap_comm);  
  MPI_Allreduce(&timer_b1, &TIMER_b1,1,MPI_DOUBLE,MPI_MAX,remap_comm);  
  MPI_Allreduce(&timer_b2, &TIMER_b2,1,MPI_DOUBLE,MPI_MAX,remap_comm);  
  MPI_Allreduce(&timer_f1, &TIMER_f1,1,MPI_DOUBLE,MPI_MAX,remap_comm);  
  MPI_Allreduce(&timer_f2, &TIMER_f2,1,MPI_DOUBLE,MPI_MAX,remap_comm);  
  MPI_Allreduce(&timer_conv, &TIMER_conv,1,MPI_DOUBLE,MPI_MAX,remap_comm);  
  MPI_Barrier(MPI_COMM_WORLD);  

  // Print stats
  if (rank == 0) {
	  printf("\n-----------------------------------------------------------\n");
	  printf("%lgs employed to perform Backward 2D FFT \n", TIMER_b1 +TIMER_b2);
	  printf("%lgs employed to transpose the array to X-pencil) \n", TIMER_TRASP_z);
	  printf("%lgs employed to perform Forward 2D FFT \n", TIMER_f1 +TIMER_f2);
  	  printf("%lgs employed to transpose the array to Z-pencil) \n", TIMER_TRASP_x);
  	  printf("%lgs employed to perform convolutions \n", TIMER_conv);
  	  printf("%lgs employed to transpose in Y-pencils \n", TIMER_TRASP_y);
  	  printf("-----------------------------------------------------------\n\n");
  	  printf("Process Ended\n");
  }

*>
!(
WRITE
REAL entry_uu, entry_uv, entry_vv, entry_vw, entry_ww, entry_uw, entry_u, entry_v, entry_w
INTEGER displs, scounts, counter=0, mode_y=0, modes_xz, start_mode_z, mode_z, end_mode_z, start_mode_x, mode_x, end_mode_x

!// Read starting modes
modes_xz = displs DIV ((ny+3)*2)
start_mode_z = modes_xz DIV (nx+1);
start_mode_x = modes_xz - start_mode_z*(nx+1);	
!// Take into account the negative modes
start_mode_z = start_mode_z - nz;

!// Calculate ending mode_z & mode_x
modes_xz = (displs+scounts) DIV ((ny+3)*2)
end_mode_z = modes_xz DIV (nx+1);
end_mode_x = modes_xz - end_mode_z*(nx+1); 			
end_mode_z = end_mode_z -nz;

INTEGER loop_end_mode_x = nx; INTEGER loop_start_mode_x = start_mode_x
!// Allocate and fill the local array VV
ARRAY(0..nx, start_mode_z..end_mode_z,-1..ny+1) OF MOMFLUX VV 
ARRAY(0..nx, start_mode_z..end_mode_z,-1..ny+1) OF VELOCITY V 
LOOP FOR mode_z = start_mode_z TO end_mode_z
	IF mode_z = end_mode_z THEN loop_end_mode_x = end_mode_x
	LOOP FOR mode_x = loop_start_mode_x TO loop_end_mode_x	
		LOOP FOR mode_y = -1 TO ny+1	
		<*	entry_uu_  =dnsdata_10move_data(uu_,counter_);
			entry_uv_  =dnsdata_10move_data(uv,counter_);
			entry_vv_  =dnsdata_10move_data(vv,counter_);
			entry_vw_  =dnsdata_10move_data(vw,counter_);
			entry_ww_  =dnsdata_10move_data(ww,counter_);
			entry_uw_  =dnsdata_10move_data(uw,counter_);
			entry_u_  =dnsdata_10move_data(u_read,counter_);
			entry_v_  =dnsdata_10move_data(v_read,counter_);
			entry_w_  =dnsdata_10move_data(w_read,counter_);
 			counter_++;		*> 
			VV(mode_x,mode_z,mode_y).uu.REAL= entry_uu;	VV(mode_x,mode_z,mode_y).vv.REAL= entry_vv;	VV(mode_x,mode_z,mode_y).ww.REAL= entry_ww;
			VV(mode_x,mode_z,mode_y).uv.REAL= entry_uv;	VV(mode_x,mode_z,mode_y).vw.REAL= entry_vw;	VV(mode_x,mode_z,mode_y).uw.REAL= entry_uw;
			V(mode_x,mode_z,mode_y).u.REAL= entry_u;	V(mode_x,mode_z,mode_y).v.REAL= entry_v;	V(mode_x,mode_z,mode_y).w.REAL= entry_w;
		<*	entry_uu_  =dnsdata_10move_data(uu_,counter_);
			entry_uv_  =dnsdata_10move_data(uv,counter_);
			entry_vv_  =dnsdata_10move_data(vv,counter_);
			entry_vw_  =dnsdata_10move_data(vw,counter_);
			entry_ww_  =dnsdata_10move_data(ww,counter_);
			entry_uw_  =dnsdata_10move_data(uw,counter_);
			entry_u_  =dnsdata_10move_data(u_read,counter_);
			entry_v_  =dnsdata_10move_data(v_read,counter_);
			entry_w_  =dnsdata_10move_data(w_read,counter_);
			counter_++;		*> 
			VV(mode_x,mode_z,mode_y).uu.IMAG= entry_uu;	VV(mode_x,mode_z,mode_y).vv.IMAG= entry_vv;	VV(mode_x,mode_z,mode_y).ww.IMAG= entry_ww;
			VV(mode_x,mode_z,mode_y).uv.IMAG= entry_uv;	VV(mode_x,mode_z,mode_y).vw.IMAG= entry_vw;	VV(mode_x,mode_z,mode_y).uw.IMAG= entry_uw;
			V(mode_x,mode_z,mode_y).u.IMAG= entry_u;	V(mode_x,mode_z,mode_y).v.IMAG= entry_v;	V(mode_x,mode_z,mode_y).w.IMAG= entry_w;
		REPEAT LOOP
	REPEAT LOOP
	loop_start_mode_x = 0
REPEAT LOOP

!)




