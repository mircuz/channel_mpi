WRITE
SUBROUTINE convol_trasp( POINTER TO ARRAY(*,*) OF MOMFLUX VVd; POINTER TO ARRAY(*,*) OF VELOCITY Vd )
<*
	/****************************************************************************
	 * 													      					*
	 * 				2D FFT with Pencil Decomposition in MPI Space				*
	 * 													      					*
	 ****************************************************************************
											     	   Author: Dr. Mirco Meazzo */
  //----------------------------------------------- Bridge Variables -------------------------------------------
  int rank = rank_; int nz, nzd, nx, nxd, ny;
  nx = nx_+1; ny = ny_+3;	nz = nz_*2+1; nxd = nxd_, nzd = nzd_;
  void *remap_to_zpencil, *remap_to_xpencil, *remap_to_ypencil;
  int nqty, permute, memoryflag, sendsize, recvsize;
  /************************************************ backward FFTs *********************************************/
  // ------------------------------------------- Setup z-Transpose --------------------------------------------
  nqty = 2;			// Use couples of real numbers per grid point
  memoryflag = 1;		// Self-allocate the buffers
  remap2d_create( MPI_COMM_WORLD , &remap_to_xpencil);
  permute = 1;  		// From z-contiguous to x-contiguous arrays
  remap2d_setup( remap_to_xpencil,
      		  	  z_klo_,  z_khi_, z_ilo_,  z_ihi_,
				  x_klo_,  x_khi_, x_ilo_,  x_ihi_, 
      			  nqty, permute, memoryflag, &sendsize, &recvsize);
  // -----------------------------------------------------------------------------------------------------------	
  // Apply AA in z-direction locally
  z_aliasing( (z_ihi_-z_ilo_+1), nz, nzd, uu_, U_t_); 	
  z_aliasing( (z_ihi_-z_ilo_+1), nz, nzd, vv_, V_t_);	
  z_aliasing( (z_ihi_-z_ilo_+1), nz, nzd, ww_, W_t_);	
  // Backward FFT
  //print_z_pencil( nzd, z_ilo_, z_ihi_, uu_, rank, localdim_z_, 0); 
  double timer_b1 = 0.0;
  timer_b1 -= MPI_Wtime();	*>
	FFT_z( uu, localdim_z, 1)
	FFT_z( vv, localdim_z, 1)
	FFT_z( ww, localdim_z, 1) 
<*timer_b1 += MPI_Wtime();
  //print_z_pencil( nzd, z_ilo_, z_ihi_, uu_, rank, localdim_z_, 0); 

  // Transpose in x-pencil
  double timer_trasp_z = 0.0, TIMER_TRASP_z = 0.0; 
  timer_trasp_z -= MPI_Wtime();
  MPI_Barrier(MPI_COMM_WORLD);
    remap2d_remap(remap_to_xpencil,uu_,uu_,sendbuf_,recvbuf_);
    remap2d_remap(remap_to_xpencil,vv_,vv_,sendbuf_,recvbuf_);
    remap2d_remap(remap_to_xpencil,ww_,ww_,sendbuf_,recvbuf_);
  MPI_Barrier(MPI_COMM_WORLD); 
  timer_trasp_z += MPI_Wtime();
  //print_x_pencil(nx, x_klo_, uu_, rank, localdim_x_/nxd*nx, 0);

  // Apply AA in x-direction locally
  x_aliasing( nx, (x_khi_-x_klo_+1), nxd, uu_, uu_);
  x_aliasing( nx, (x_khi_-x_klo_+1), nxd, vv_, vv_);
  x_aliasing( nx, (x_khi_-x_klo_+1), nxd, ww_, ww_);
  // Backward RFT
  double timer_b2 = 0.0;
  timer_b2 -= MPI_Wtime();  *>
	FFT_x( uu, localdim_x, 1)
	FFT_x( vv, localdim_x, 1)
	FFT_x( ww, localdim_x, 1) 
<*timer_b2 += MPI_Wtime(); 
  //print_x_pencil(nxd, x_klo_, uu_, rank, localdim_x_, 0);
  remap2d_destroy(remap_to_xpencil);

  /************************************************ Convolutions *********************************************/
  double timer_conv = 0.0;
  timer_conv -= MPI_Wtime();	*>
LOOP FOR i=0 TO localdim_x
	uv[i] = uu[i]*vv[i]
	vw[i] = vv[i]*ww[i]
	uw[i] = uu[i]*ww[i]
	ww[i] = ww[i]*ww[i]
	uu[i] = uu[i]*uu[i]
	vv[i] = vv[i]*vv[i] 
REPEAT LOOP 
<*timer_conv += MPI_Wtime();
  //print_x_pencil(nxd, x_klo_, uv_, rank, localdim_x_, 0);

  /************************************************ forward FFTs *********************************************/
  // -------------------------------------------- Setup x-Transpose -----------------------------------------
  remap2d_create( MPI_COMM_WORLD , &remap_to_zpencil);
  permute = 1; 		// From x-contiguous to z-contiguous arrays
  remap2d_setup( remap_to_zpencil,
		  	  	  x_ilo_,  x_ihi_,  x_klo_, x_khi_,
				  z_ilo_,  z_ihi_,  z_klo_, z_khi_,
				  nqty, permute, memoryflag, &sendsize, &recvsize);
  // -----------------------------------------------------------------------------------------------------------
  // Forward HFT
  double timer_f1 = 0.0;  
  timer_f1 -= MPI_Wtime();  *>
	FFT_x( uu, localdim_x, -1)
	FFT_x( uv, localdim_x, -1)
	FFT_x( vv, localdim_x, -1)
	FFT_x( vw, localdim_x, -1)
	FFT_x( uw, localdim_x, -1)
	FFT_x( ww, localdim_x, -1) 
<*timer_f1 += MPI_Wtime();
  //print_x_pencil(nxd, x_klo_, uu_, rank, localdim_x_, 0);
  // x-Dealiasing
    x_dealiasing( localdim_x_/(2*nxd), nx, nxd, uu_);
	x_dealiasing( localdim_x_/(2*nxd), nx, nxd, uv_);
	x_dealiasing( localdim_x_/(2*nxd), nx, nxd, vv_);
	x_dealiasing( localdim_x_/(2*nxd), nx, nxd, vw_);
	x_dealiasing( localdim_x_/(2*nxd), nx, nxd, uw_);
	x_dealiasing( localdim_x_/(2*nxd), nx, nxd, ww_); 
  //print_x_pencil(nx, x_klo_, uu_, rank, localdim_x_/nxd*nx, 0);
  // Transpose to x-pencil
  double timer_trasp_x = 0.0, TIMER_TRASP_x = 0.0;
  timer_trasp_x -= MPI_Wtime();
  MPI_Barrier(MPI_COMM_WORLD);
    remap2d_remap(remap_to_zpencil,uu_,uu_,sendbuf_,recvbuf_);
    remap2d_remap(remap_to_zpencil,uv_,uv_,sendbuf_,recvbuf_);
    remap2d_remap(remap_to_zpencil,vv_,vv_,sendbuf_,recvbuf_);
    remap2d_remap(remap_to_zpencil,vw_,vw_,sendbuf_,recvbuf_);
    remap2d_remap(remap_to_zpencil,ww_,ww_,sendbuf_,recvbuf_);
    remap2d_remap(remap_to_zpencil,uw_,uw_,sendbuf_,recvbuf_);  
  MPI_Barrier(MPI_COMM_WORLD);  
  timer_trasp_x += MPI_Wtime();
  //print_z_pencil( nzd, z_ilo_, z_ihi_, uu_, rank, localdim_z_, 0);

  // Forward FFT
  double timer_f2 = 0.0;
  timer_f2 -= MPI_Wtime();  *>
	FFT_z( uu, localdim_z, -1)
	FFT_z( uv, localdim_z, -1)
	FFT_z( vv, localdim_z, -1)
	FFT_z( vw, localdim_z, -1)
	FFT_z( uw, localdim_z, -1)
	FFT_z( ww, localdim_z, -1) 
<*timer_f2 += MPI_Wtime();
  
  // z-Dealiasing
    z_dealiasing( (z_ihi_-z_ilo_+1), nz, nzd, uu_);
	z_dealiasing( (z_ihi_-z_ilo_+1), nz, nzd, uv_);
	z_dealiasing( (z_ihi_-z_ilo_+1), nz, nzd, vv_);
	z_dealiasing( (z_ihi_-z_ilo_+1), nz, nzd, vw_);
	z_dealiasing( (z_ihi_-z_ilo_+1), nz, nzd, uw_);
	z_dealiasing( (z_ihi_-z_ilo_+1), nz, nzd, ww_); 
  //print_z_pencil( nz, z_ilo_, z_ihi_, uu_, rank, localdim_z_/nzd*nz, 0);
  remap2d_destroy(remap_to_zpencil);

  /************************************************ Print Stats *********************************************/
  /*/ Gather all stats
  double TIMER_b1, TIMER_b2, TIMER_f1, TIMER_f2, TIMER_conv;
  MPI_Allreduce(&timer_trasp_x, &TIMER_TRASP_x,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD);  
  MPI_Allreduce(&timer_trasp_z, &TIMER_TRASP_z,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD);  
  MPI_Allreduce(&timer_b1, &TIMER_b1,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD);  
  MPI_Allreduce(&timer_b2, &TIMER_b2,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD);  
  MPI_Allreduce(&timer_f1, &TIMER_f1,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD);  
  MPI_Allreduce(&timer_f2, &TIMER_f2,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD);  
  MPI_Allreduce(&timer_conv, &TIMER_conv,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD);  
  MPI_Barrier(MPI_COMM_WORLD);  

  // Print stats
  if (rank == 0) {
	  printf("\n-----------------------------------------------------------\n");
	  printf("%lgs employed to perform Backward 2D FFT \n", TIMER_b1 +TIMER_b2);
	  printf("%lgs employed to transpose the array to X-pencil) \n", TIMER_TRASP_z);
	  printf("%lgs employed to perform Forward 2D FFT \n", TIMER_f1 +TIMER_f2);
  	  printf("%lgs employed to transpose the array to Z-pencil) \n", TIMER_TRASP_x);
  	  printf("%lgs employed to perform convolutions \n", TIMER_conv);
  	  printf("-----------------------------------------------------------\n\n");
  	  printf("Process Ended\n");
  } */*>
INTEGER counter=0
LOOP FOR mode_x = ilo TO ihi
	LOOP FOR mode_z = klo TO khi	
	!(	VVd(mode_x,mode_z).uu.REAL= uu[counter];	VVd(mode_x,mode_z).vv.REAL= vv[counter];	
		VVd(mode_x,mode_z).ww.REAL= ww[counter];	VVd(mode_x,mode_z).uv.REAL= uv[counter];	
		VVd(mode_x,mode_z).vw.REAL= vw[counter];	VVd(mode_x,mode_z).uw.REAL= uw[counter];	INC counter
		VVd(mode_x,mode_z).uu.IMAG= uu[counter];	VVd(mode_x,mode_z).vv.IMAG= vv[counter];	
		VVd(mode_x,mode_z).ww.IMAG= ww[counter];	VVd(mode_x,mode_z).uv.IMAG= uv[counter];	
		VVd(mode_x,mode_z).vw.IMAG= vw[counter];	VVd(mode_x,mode_z).uw.IMAG= uw[counter];	INC counter !)
		!IF rank=5 THEN WRITE "("mode_x","mode_z")  " Vd(mode_x,mode_z).u
	REPEAT LOOP
REPEAT LOOP
END convol_trasp

SUBROUTINE move_data(INTEGER y_plane) FOLLOWS
SUBROUTINE random_field
	V=0
	IF rank=0 THEN 
		LOOP FOR ALL iy
			DO WITH V(0,iz,iy): u=0.0001*EXP(RAND()*2*PI*I); v=0.0001*EXP(RAND()*2*PI*I); w=0.0001*EXP(RAND()*2*PI*I) FOR ALL iz
			LOOP FOR ix=ilo TO ihi
				IF ix=0 THEN LOOP FOR iz=klo TO khi
					IF iz>1 THEN V(ix,-iz,iy).u=CONJG(V(0,iz,iy).u);V(0,-iz,iy).v=CONJG(V(0,iz,iy).v);V(0,-iz,iy).w=CONJG(V(0,iz,iy).w)
				REPEAT
			REPEAT
		REPEAT
	END IF
	LOOP FOR ix=ilo TO ihi AND iz=klo TO khi
		IF ix=0 AND iz=0 THEN DO WITH V(ix,iz,iy): u.REAL=3/4*(1-[1-y(iy)]^2); u.IMAG=0; v=0; w.IMAG=0 FOR iy=-1 TO ny+1
	REPEAT 	
	LOOP FOR y_plane=-1 TO ny+1
		move_data(y_plane)
	REPEAT 
	!//write_on_disk
END random_field
 
IF generate_inputs = TRUE THEN random_field
