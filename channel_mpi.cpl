!USE rtchecks
#include <mpi.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#include "remap3d_wrap.h"

INTEGER rank
gamma=0
USE dnsdata
USE initialization
USE data_man
USE dnsdirect

!// Timeloop
USE convol_trasp

time=~+2/RK1_rai_coeff*deltat
buildrhs(RK1_rai, VV, V);	linsolve(RK1_rai_coeff/deltat)	
vetaTOuvw; computeflowrate(RK1_rai_coeff/deltat)
ytoz_pencil

!(counter = 0
REAL u_transfer, v_transfer, w_transfer
IF rank = 0 THEN
LOOP FOR i=ilo TO ihi
	LOOP FOR k=klo TO khi
		LOOP FOR j=-1 TO ny+1
			u_transfer= V(i,k,j).u.REAL;	v_transfer= V(i,k,j).v.REAL;	w_transfer= V(i,k,j).w.REAL
			WRITE "("i","k","j")   " V(i,k,j).u
			WRITE u_transfer
		<*  //printf("U_t= %g \n", w_transfer_);
			U_t_[counter_]= u_transfer_;	V_t_[counter_]= v_transfer_;	W_t_[counter_]= w_transfer_;	*>
			printf("U_t[%d]= %f \\n", counter_, U_t_[counter_]);
			INC counter
		REPEAT
	REPEAT
REPEAT !)


!(<* for (int counter_ = 0; counter_ < localdim_x_; counter_++) {
	printf("U[%d]= %f\n", counter_, (*(double *)(counter_*(ssize_t)sizeof(double)+U_t_)));		
} *> 

END IF !)
move_data

!// Loop end

<* 	MPI_Barrier(MPI_COMM_WORLD);
	free(u_convol_);	free(v_convol_);	free(w_convol_);				//Worked uvw
	free(U_t_);		free(V_t_);		free(W_t_);								//Local UVW copied into structure
  	free(uu_);	free(uv_);	free(vv_);	free(vw_);	free(ww_);	free(uw_); 	//Local convols copied into structure
	free(recvbuf);	 free(sendbuf);  										//Remap local arrays
	MPI_Finalize();	*>

