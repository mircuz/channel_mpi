#include <mpi.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#include "remap2d_wrap.h"
!//#include "/home/mirco/Scrivania/hdf5/include/hdf5.h"
!//#include "/home/mirco/Scrivania/hdf5/include/hdf5_hl.h"
!//#include "/cineca/prod/opt/libraries/hdf5/1.8.18/openmpi--1-10.3--gnu--6.1.0/include/hdf5.h"
!//#include "/cineca/prod/opt/libraries/hdf5/1.8.18/openmpi--1-10.3--gnu--6.1.0/include/hdf5_hl.h"

INTEGER rank, size
gamma=0
USE dnsdata
USE initialization
USE data_man
USE convol_trasp
USE dnsdirect


INTEGER n=0

!(LOOP FOR j=0 TO ny+2
	LOOP FOR i=ilo TO ihi
		LOOP FOR k=0 TO nz*2 
			V.u(i,k-nz,j-1).REAL= j*(2*nz+1)*(nx+1)*2+i*(2*nz+1)*2+k*2
			V.v(i,k-nz,j-1).REAL= 1000+ V(i,k-nz,j-1).u.REAL
			V.w(i,k-nz,j-1).REAL= 0
			INC n
			V.u(i,k-nz,j-1).IMAG= V.u(i,k-nz,j-1).REAL+1
			V.v(i,k-nz,j-1).IMAG= 1000+ V(i,k-nz,j-1).u.IMAG
			V.w(i,k-nz,j-1).IMAG= 0
			!WRITE "("i","k-nz","j-1") " V(i,k-nz,j-1).u 
			INC n
		REPEAT LOOP
	REPEAT LOOP
REPEAT LOOP   !)
WRITE
<* 	clock_t begin = clock();*>
LOOP forward WHILE time < t_max-deltat/2
	time=~+2/RK1_rai_coeff*deltat
	buildrhs(RK1_rai);	linsolve(RK1_rai_coeff/deltat)	
	vetaTOuvw;	computeflowrate(RK1_rai_coeff/deltat);	move_data 

	time=~+2/RK2_rai_coeff*deltat
	buildrhs(RK2_rai);	linsolve(RK2_rai_coeff/deltat)
	vetaTOuvw; 	computeflowrate(RK2_rai_coeff/deltat); 	move_data

	time=~+2/RK3_rai_coeff*deltat
	buildrhs(RK3_rai);	linsolve(RK3_rai_coeff/deltat)
	vetaTOuvw; 	computeflowrate(RK3_rai_coeff/deltat);	outstats;	move_data;
	!//IF time>0 AND FLOOR((time+0.5*deltat)/dt_save) > FLOOR((time-0.5*deltat)/dt_save) THEN  write_on_disk  
REPEAT forward 

!// Get timing
<*	clock_t end = clock();
	double sim_time = (double)(end - begin) / CLOCKS_PER_SEC;	double max_sim_time=0.0;
	MPI_Allreduce(&sim_time, &max_sim_time,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD); 
	FILE *ft = fopen("time_out","w");	fprintf(ft, "Simulation performed in %f s", max_sim_time); 	fclose(ft);	*>

IF rank=0 THEN WRITE; WRITE "<Simulation Ended>"; WRITE; WRITE; END IF
<* 	MPI_Finalize();	*>
