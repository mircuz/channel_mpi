!USE rtchecks
SUBROUTINE buildrhs[SUBROUTINE(COMPLEX rhs^,old^(*),unknown,implicit_part,explicit_part) timescheme; 
						POINTER TO ARRAY(*,*,*) OF MOMFLUX VVd; POINTER TO ARRAY(*,*,*) OF VELOCITY Vd] FOLLOWS
SUBROUTINE linsolve(REAL lambda) FOLLOWS
SUBROUTINE deriv(ARRAY(*) OF REAL f0,f1^) FOLLOWS
SUBROUTINE vetaTOuvw FOLLOWS
SUBROUTINE computeflowrate(REAL lambda) FOLLOWS
#include <string.h>
<* typedef struct complex {
		double 	real;
		double	imag;
  	} complex; *>
MODULE dnsdirect

INLINE REAL FUNCTION D0(REAL f(*)) = d0(-2)*f(-2)+d0(-1)*f(-1)+d0(0)*f(0)+d0(1)*f(1)+d0(2)*f(2)
INLINE REAL FUNCTION D1(REAL f(*)) = d1(-2)*f(-2)+d1(-1)*f(-1)+d1(0)*f(0)+d1(1)*f(1)+d1(2)*f(2)
INLINE REAL FUNCTION D2(REAL f(*)) = d2(-2)*f(-2)+d2(-1)*f(-1)+d2(0)*f(0)+d2(1)*f(1)+d2(2)*f(2)
INLINE REAL FUNCTION D4(REAL f(*)) = d4(-2)*f(-2)+d4(-1)*f(-1)+d4(0)*f(0)+d4(1)*f(1)+d4(2)*f(2)
INLINE COMPLEX FUNCTION D0(COMPLEX f(*)) = D0(f.REAL)+I*D0(f.IMAG)
INLINE COMPLEX FUNCTION D1(COMPLEX f(*)) = D1(f.REAL)+I*D1(f.IMAG)
INLINE COMPLEX FUNCTION D2(COMPLEX f(*)) = D2(f.REAL)+I*D2(f.IMAG)
INLINE COMPLEX FUNCTION D4(COMPLEX f(*)) = D4(f.REAL)+I*D4(f.IMAG)

!//--------------------------------------------------------------------------------------------------------------------------
SUBROUTINE buildrhs[SUBROUTINE(COMPLEX rhs^,old^(*),unknown,implicit_part,explicit_part) timescheme;
						POINTER TO ARRAY(*,*,*) OF MOMFLUX VVd; POINTER TO ARRAY(*,*,*) OF VELOCITY Vd]
	LOOP FOR ix=ilo TO ihi AND iz=klo TO khi
		alfa=alfa0*ix; beta=beta0*iz
    	ialfa==I*alfa; ibeta==I*beta
   		k2=alfa^2+beta^2
		!// Find old, unknown, implicit and explicit
		LOOP FOR iy= 1 TO ny-1
			WITH derivatives(iy)
      		POINTER TO MOMFLUX VVm2,VVm1,VV0,VV1,VV2              
        	VVm2=VVd(ix,iz,(iy-2));VVm1=VVd(ix,iz,(iy-1));VV0=VVd(ix,iz,(iy));VV1=VVd(ix,iz,(iy+1));VV2=VVd(ix,iz,(iy+2))
			#define D(d,f) d(-2)*VVm2.f+d(-1)*VVm1.f+d(0)*VV0.f+d(1)*VV1.f+d(2)*VV2.f
			WITH Vd(ix,iz,iy+(-2..2)):	
      		D0_uw_=D(d0,uw)
      		D1_uw_=D(d1,uw)
     		rhsu=-ialfa*D(d0,uu)-D(d1,uv)-ibeta*D0_uw_
      		rhsv=-ialfa*D(d0,uv)-D(d1,vv)-ibeta*D(d0,vw)
      		rhsw=-ialfa*D0_uw_-D(d1,vw)-ibeta*D(d0,ww)

			COMPLEX expl = ialfa*[ialfa*D(d1,uu)+D(d2,uv)+ibeta*D1_uw_]+
     					 ibeta*[ialfa*D1_uw_+D(d2,vw)+ibeta*D(d1,ww)]-k2*rhsv
			timescheme{ memrhs(ix,iz,iy).D2v,oldrhs(ix,iz,iy).D2v,D2(v)-k2*D0(v),
												(SUM OS(iy,i)*v(i) FOR ALL i),expl}    

    		IF ix=0 AND iz=0 THEN
      		!// u media conservata in eta.REAL e w media in eta.IMAG
				expl = rhsu.REAL+px+[rhsw.REAL+pz]*I
		   		timescheme{memrhs(0,0,iy).eta,oldrhs(0,0,iy).eta,D0(u.REAL)+D0(w.REAL)*I,
                  										 ni*[D2(u.REAL)]+ni*D2(w.REAL)*I,
							                 !0.5*[D2(u.REAL)]+0.5*D2(w.REAL)*I, !Vittori
                 																	expl} 
      		ELSE
     	 		expl = ibeta*rhsu-ialfa*rhsw
    			timescheme{memrhs(ix,iz,iy).eta,oldrhs(ix,iz,iy).eta,ibeta*D0(u)-ialfa*D0(w),
        		   							(SUM SQ(iy,i)*[ibeta*u(i)-ialfa*w(i)] FOR ALL i),
            	       																	expl} 
      		END IF
		REPEAT		
		!// Substitute eta and D2v inside V 
		LOOP FOR iy=1 TO ny-1
			WITH Vd(ix,iz,iy),memrhs(ix,iz,iy): u=eta; v=D2v		
			!(WRITE "["rank"]  ("ix","iz","iy") V     : " V(ix,iz,iy)
			WRITE "["rank"]  ("ix","iz","iy") oldrhs: " oldrhs(ix,iz,iy)
			WRITE !)
		REPEAT	
	REPEAT
END buildrhs

!//--------------------------------------------------------------------------------------------------------------------------
INLINE FUNCTION D20(ARRAY(*) OF COMPLEX f)=d240(-2)*f(-1)+d240(-1)*f(0)+d240(0)*f(1)+d240(1)*f(2)+d240(2)*f(3)
INLINE FUNCTION D2n(ARRAY(*) OF COMPLEX f)=d24n(-2)*f(ny-3)+d24n(-1)*f(ny-2)+d24n(0)*f(ny-1)+d24n(1)*f(ny)+d24n(2)*f(ny+1)

!//--------------------------------------------------------------------------------------------------------------------------
SUBROUTINE linsolve(REAL lambda)
LOOP FOR ix=ilo TO ihi
	alfa=alfa0*ix; ialfa==I*alfa
  	LOOP FOR iz=klo TO khi
   		beta=beta0*iz; ibeta==I*beta
    	k2=alfa^2+beta^2
    	LOOP FOR iy=1 TO ny-1 AND ALL i WITH derivatives(iy)
    		D2vmat(iz,iy,i)=lambda*[d2(i)-k2*d0(i)]-OS(iy,i)
      		etamat(iz,iy,i)=lambda*d0(i)-SQ(iy,i)
    	REPEAT 
 		!// Lower BCs
		WITH bc0(ix,iz)
    	IF ix=0 AND iz=0 THEN
      		u=u_conv+u0
        	w=~+w_conv+w0
 			v=0; vy=0; eta=u+I*w
      	ELSE
        	vy=-ialfa*u-ibeta*w
        	eta=ibeta*u-ialfa*w
      	END IF
      	v=~-v0bc(0,-2)*vy/v0bc(-1,-2) 
      	applybc_0(D2vmat(iz),v0bc)
      	applybc_0(etamat(iz),eta0bc)
      	V(ix,iz,1).v=~-D2vmat(iz,1,-2)*vy/v0bc(-1,-2)-D2vmat(iz,1,-1)*v/v0bc(0,-1)
      	V(ix,iz,2).v=~-D2vmat(iz,2,-2)*v/v0bc(0,-1)
      	V(ix,iz,1).u=~-etamat(iz,1,-1)*eta/eta0bc(0,-1)          
      	V(ix,iz,2).u=~-etamat(iz,2,-2)*eta/eta0bc(0,-1)

		!// Upper BCs
    	WITH bcn(ix,iz)
      	IF ix=0 AND iz=0 THEN
        	u=u_conv+un
        	w=~+w_conv+wn
			v=0; vy=0; eta=u+I*w 
      	ELSE
        	vy=-ialfa*u-ibeta*w
        	eta=ibeta*u-ialfa*w
      	END IF
      	v=~-vnbc(0)(2)*vy/vnbc(1)(2)
      	applybc_n(D2vmat(iz),vnbc)
      	applybc_n(etamat(iz),etanbc)
      	V(ix,iz,ny-1).v=~-D2vmat(iz,ny-1,2)*vy/vnbc(1,2)-D2vmat(iz,ny-1,1)*v/vnbc(0,1)
      	V(ix,iz,ny-2).v=~-D2vmat(iz,ny-2,2)*v/vnbc(0,1)
      	V(ix,iz,ny-1).u=~-etamat(iz,ny-1,1)*eta/etanbc(0,1)
      	V(ix,iz,ny-2).u=~-etamat(iz,ny-2,2)*eta/etanbc(0,1)   

		!// Solve
    	LUdecomp D2vmat(iz); LUdecomp etamat(iz) 
		D2vmat(iz,1,-2..-1) = 0; 	etamat(iz,1,-2..-1) = 0
		D2vmat(iz,2,-2) = 0;		etamat(iz,2,-2) = 0
		D2vmat(iz,ny-1,1..2)= 0; 	etamat(iz,ny-1,1..2)= 0
		D2vmat(iz,ny-2,2)=0;		etamat(iz,ny-2,2)=0	
    	WITH V(ix,iz,*)
		LeftLUDiv(v.REAL,D2vmat(iz),v.REAL)
		LeftLUDiv(v.IMAG,D2vmat(iz),v.IMAG) 
   	 	LeftLUDiv(u.REAL,etamat(iz),u.REAL)       
    	LeftLUDiv(u.IMAG,etamat(iz),u.IMAG)  

  	REPEAT
  	LOOP FOR ALL iz
    	WITH V(ix,iz,*):
    	v(ny)  =(bcn(ix,iz).v  -SUM v(ny-1+i)*vnbc(0,i) FOR i=-2 TO 0)/vnbc(0,1)
    	v(ny+1)=(bcn(ix,iz).vy -SUM v(ny-1+i)*vnbc(1,i) FOR i=-2 TO 1)/vnbc(1,2)
    	u(ny)=(bcn(ix,iz).eta-SUM u(ny-1+i)*etanbc(0,i) FOR i=-2 TO 0)/etanbc(0,1)
   	 	u(ny+1)=(-SUM u(ny-1+i)*etanbc(1,i) FOR i=-2 TO 1)/etanbc(1,2)
    	v(0) =(bc0(ix,iz).v-SUM v(1+i)*v0bc(0,i) FOR i=0 TO 2)/v0bc(0,-1)
    	v(-1)=(bc0(ix,iz).vy-SUM v(1+i)*v0bc(-1,i) FOR i=-1 TO 2)/v0bc(-1,-2)
    	u(0) =(bc0(ix,iz).eta-SUM u(1+i)*eta0bc(0,i) FOR i=0 TO 2)/eta0bc(0,-1)
    	u(-1)=(-SUM u(1+i)*eta0bc(-1,i) FOR i=-1 TO 2)/eta0bc(-1,-2)
  	REPEAT
REPEAT 
END linsolve

!//--------------------------------------------------------------------------------------------------------------------------
SUBROUTINE deriv(ARRAY(*) OF REAL f0,f1^)
	f1(0)=SUM d140(i)*f0(1+i) FOR i=-2 TO 2
	f1(-1)=SUM d14m1(i)*f0(1+i) FOR i=-2 TO 2
	f1(ny)=SUM d14n(i)*f0(ny-1+i) FOR i=-2 TO 2
	f1(ny+1)=SUM d14np1(i)*f0(ny-1+i) FOR i=-2 TO 2
	DO WITH derivatives(i) f1(i)=D1(f0(i+(*))) FOR i=1 TO ny-1
	WITH derivatives(1): f1(1)=~-(d0(-1)*f1(0)+d0(-2)*f1(-1))
	WITH derivatives(2): f1(2)=~-d0(-2)*f1(0)
	WITH derivatives(ny-1): f1(ny-1)=~-(d0(1)*f1(ny)+d0(2)*f1(ny+1))
	WITH derivatives(ny-2): f1(ny-2)=~-d0(2)*f1(ny)	
	LeftLUDiv(f1,D0mat,f1)
END deriv

!//Remember: eta=+I*beta*u-I*alfa*w----------------------------------------------------------------------------------------- 
SUBROUTINE vetaTOuvw
	LOOP FOR ix=ilo TO ihi AND iz=klo TO khi
		IF ix=0 AND iz=0 THEN WITH V(0,0,*): w.REAL=u.IMAG; u.IMAG=0; w.IMAG=0
	REPEAT LOOP
	LOOP FOR ix=ilo TO ihi 
		alfa=alfa0*ix
		LOOP FOR iz=klo TO khi EXCEPT ix=0 AND iz=0
  			WITH V(ix,iz,*):
  			deriv(v.REAL,w.REAL)
  			deriv(v.IMAG,w.IMAG)
			beta=beta0*iz; k2=alfa^2+beta^2
    		DO temp=I*(alfa*w(iy)-beta*u(iy))/k2
     			w(iy)=I*(beta*w(iy)+alfa*u(iy))/k2 
      			u(iy)=temp
    		FOR ALL iy
		REPEAT
	REPEAT 
END vetaTOuvw

!//--------------------------------------------------------------------------------------------------------------------------
SUBROUTINE computeflowrate(REAL lambda)
  	REAL ucorr(-1..(ny+1))=0	
  	DO ucorr(iy)=1 FOR iy=1 TO ny-1
	LOOP FOR iz=klo TO khi	
		IF iz=0 THEN  
  			LOOP FOR iy=1 TO ny-1 WITH derivatives(iy)
     			etamat(0,iy)=lambda*d0-ni*d2
  			REPEAT 
  			applybc_0(etamat(0),eta0bc)
  			applybc_n(etamat(0),etanbc)
  			LUdecomp etamat(0)
			etamat(0,1,-2..-1) = 0;	etamat(0,2,-2) = 0
			etamat(0,ny-1,1..2)= 0;	etamat(0,ny-2,2)=0
			etamat(0,1,-2..-1) = 0;		etamat(0,2,-2) = 0
			etamat(0,ny-1,1..2)= 0;		etamat(0,ny-2,2)=0
  			LeftLUDiv(ucorr,etamat(0),ucorr) 
			ucorr(ny)  =(-SUM ucorr(ny-1+i)*etanbc(0)(i) FOR i=-2 TO 0)/etanbc(0)(1)
   			ucorr(ny+1)=(-SUM ucorr(ny-1+i)*etanbc(1)(i) FOR i=-2 TO 1)/etanbc(1)(2)
    		ucorr(0) =(-SUM ucorr(1+i)*eta0bc(0)(i) FOR i=0 TO 2)/eta0bc(0)(-1)
    		ucorr(-1)=(-SUM ucorr(1+i)*eta0bc(-1)(i) FOR i=-1 TO 2)/eta0bc(-1)(-2)
			LOOP FOR ix=ilo TO ihi
				IF ix=0 THEN
					STRUCTURE(REAL u,w,uc,wc) fr=0   
  					WITH V(0, 0, *) 
  					DO v(iy)=0 FOR ALL iy
  					yintegr(fr.u, u.REAL)
  					yintegr(fr.w, w.REAL)
  					yintegr(fr.uc, ucorr) 
					px = (1-gamma)*6*ni/fr.u   !Constant Power Input
					!pz = (1-gamma)*6*ni/fr.w   !Constant Power Input
					IF meanflowx # -99 THEN 
    					px=0; corrpx=(meanflowx+u_conv*(ymax-ymin)-fr.u)/fr.uc ! Constant Q
    					u.REAL=~+corrpx*ucorr
						fr.u = meanflowx
  					END IF
  					IF meanflowz # -99 THEN 
    					pz=0; corrpz=(meanflowz+w_conv*(ymax-ymin)-fr.w)/fr.uc  ! Constant Q
    					w.REAL=~+corrpz*ucorr
						fr.w = meanflowz
  					END IF
  					IF meanpx # -99 THEN px = meanpx ! Constant Px
  					IF meanpz # -99 THEN pz = meanpz ! Constant Pz
  					flowx=fr.u-u_conv*(ymax-ymin); flowz=fr.w-w_conv*(ymax-ymin)
     				u1zero=SUM d140(i)*V(0, 0, i+1).u.REAL FOR i=-2 TO 2
     				w1zero=SUM d140(i)*V(0, 0, i+1).w.REAL FOR i=-2 TO 2
				END IF
			REPEAT LOOP
		END IF
  	REPEAT LOOP  
END computeflowrate

END dnsdirect

!// Function to copy data from the structure to C--------------------------------------------------------
SUBROUTINE move_data
	INTEGER counter = 0
	LOOP FOR i=ilo TO ihi
		LOOP FOR k=klo TO khi
			LOOP FOR j=-1 TO ny+1
				U_t[counter]= V(i,k,j).u.REAL;		V_t[counter]= V(i,k,j).v.REAL;		W_t[counter]= V(i,k,j).w.REAL;		INC counter;
				U_t[counter]= V(i,k,j).u.IMAG;		V_t[counter]= V(i,k,j).v.IMAG;		W_t[counter]= V(i,k,j).w.IMAG;		INC counter;
			REPEAT
		REPEAT
	REPEAT 
END move_data 

SUBROUTINE write_mean_flow
<*	int nx= 2*nx_+1;	int nz= 2*nz_+1;	int ny=ny_+3;
	hid_t file_id, plist_id, dataspace_id, dataset_id, filespace;
	hsize_t dims[1];
	herr_t wrt;
	dims[0] = ny;
	char field_time[25]="/",  field_mean_u[25]="",  field_mean_w[25]="";// time_str[25]="Field";
	gcvt (time_, 10, field_time);
	strcat(field_mean_u,field_time);		strcat(field_mean_u,"/u_mean");	
	strcat(field_mean_w,field_time);		strcat(field_mean_w,"/w_mean");

	double mean_u[ny];
	for (int i = 0; i < ny; i++) {
		mean_u[i] = (*(double *)((i-1)*(ssize_t)sizeof(double)+mean_u_));	
	}
	plist_id = H5Pcreate(H5P_FILE_ACCESS);
	file_id = H5Fopen("Field.h5", H5F_ACC_RDWR, plist_id);
	H5Pclose(plist_id);
	dataspace_id = H5Screate_simple(1, dims, NULL);
	plist_id = H5Pcreate(H5P_DATASET_CREATE);
	dataset_id = H5Dcreate(file_id, field_mean_u, H5T_IEEE_F64LE, dataspace_id, H5P_DEFAULT, plist_id, H5P_DEFAULT);
	filespace = H5Dget_space(dataset_id);
	wrt = H5Dwrite(dataset_id, H5T_NATIVE_DOUBLE, dataspace_id, filespace, H5P_DEFAULT, mean_u);
	H5Dclose(dataset_id);
	H5Pclose(plist_id);
	H5Sclose(dataspace_id);
	H5Fclose(file_id);*>
END write_mean_flow

SUBROUTINE write_on_disk
<*	int nx= nx_+1;	int nz= 2*nz_+1;	int ny=ny_+3;	int size= size_; 	int rank = rank_; 	int mem_reader;		double ni = 1/ni_;
	/*HDF5 APIs definitions*/ 		
    hid_t       file_id, dset_u, dset_v, dset_w, dset_eta;/* file and dataset identifiers */
    hid_t       filespace, memspace, global_filespace;    /* file and memory dataspace identifiers */
	hid_t		plist_id, plist_id_write, group_id;	      /* property list identifier */
	hid_t		filetype, memtype;
    hsize_t     dimsf[3], dim_vect[1];    /* dataset dimensions */
    hsize_t     chunk_dims[3];            /* chunk dimensions */
    hsize_t		count[3];	          	  /* hyperslab selection parameters */
    hsize_t		stride[3];
    hsize_t		block[3];
    hsize_t		offset[3];
    herr_t		file_type, mem_type, file_hyper, mem_hyper, status;
	MPI_Info info  = MPI_INFO_NULL;
	char field_time[25]="/", field_v[25]="", field_eta[25]="";// field_mean_u[25]="",  field_mean_w[25]="";// time_str[25]="Field";
	gcvt (time_, 10, field_time);
	//strcat(field_mean_u,field_time);		strcat(field_mean_u,"/u_mean");	
	strcat(field_v,field_time);		strcat(field_v,"/v");
	//strcat(field_mean_w,field_time);		strcat(field_mean_w,"/w_mean");
	strcat(field_eta,field_time);	strcat(field_eta,"/eta");
	//strcat(time_str,".h5");
	//if( chdir(output_cwd_) !=0 )
	//if( chdir("/media/sf_Materiale_Tesi") !=0 )
		//perror(".:Error changing folder in outstats routine:.");
	//=======================================================================================================
	int dim=3;				
	hsize_t att_dims=dim;		
	double att_modes[dim];
	att_modes[0] = nx;	att_modes[1] = nz;	att_modes[2] = ny;
	//-------------------------------------------- DATATYPE DEF -----------------------------------------------	
	complex *complex_disk_data = (complex*) malloc(nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1)*sizeof(complex));	
	if ( complex_disk_data == NULL) {
		perror(".:Error while allocating complex_disk_data:.\n");	
		abort();
	}	
						
	/*Create FILE Type*/
	filetype = H5Tcreate (H5T_COMPOUND, sizeof (complex));
	file_type = H5Tinsert (filetype, "real", HOFFSET (complex, real), H5T_IEEE_F64LE);
	file_type = H5Tinsert (filetype, "imag", HOFFSET (complex, imag), H5T_IEEE_F64LE);

	/*Create MEMORY Type*/
	memtype = H5Tcreate (H5T_COMPOUND, sizeof (complex));
	mem_type = H5Tinsert (memtype, "real", HOFFSET (complex, real), H5T_NATIVE_DOUBLE);
	mem_type = H5Tinsert (memtype, "imag", HOFFSET (complex, imag), H5T_NATIVE_DOUBLE);

	//------------------------------------------------ MEMORY -------------------------------------------------
	/*Create the dataspace for the MEMORY dataset*/
	memspace = H5Screate_simple(1, dim_vect, NULL);
	/*Set MEMORY hyperslab*/    
	offset[0]  = 0;
	stride[0] = 1;
	count[0]  = nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1);
	block[0]  = 1;
	mem_hyper = H5Sselect_hyperslab(memspace, H5S_SELECT_SET, offset, stride, count, block);

  	//------------------------------------------------ FILE --------------------------------------------------
	/*Set up file access property list with parallel I/O access*/
    plist_id = H5Pcreate(H5P_FILE_ACCESS);
    H5Pset_fapl_mpio(plist_id, MPI_COMM_WORLD, info);
    /*Create a new file collectively and release property list identifier*/
    file_id = H5Fopen("Field.h5", H5F_ACC_RDWR, plist_id);
    //file_id = H5Fcreate("Field.h5", H5F_ACC_TRUNC, H5P_DEFAULT, plist_id);
    H5Pclose(plist_id);  

	/* Create a group named "time" in the file. */
   	group_id = H5Gcreate2(file_id, field_time, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

    /*Create the dataspace for the FILE dataset*/
    dimsf[0] = ny;	dimsf[1] = nx;	dimsf[2] = nz;			
	global_filespace = H5Screate_simple(3, dimsf, NULL); 	

    /*Create the FILE chunked dataset*/
	chunk_dims[0] = 1;		chunk_dims[1] = 1;		chunk_dims[2] = nz; 
    plist_id = H5Pcreate(H5P_DATASET_CREATE);
    H5Pset_chunk(plist_id, 3, chunk_dims);
//	dset_u = H5Dcreate(file_id, field_u, filetype, global_filespace, H5P_DEFAULT, plist_id, H5P_DEFAULT);
    
    /*Set FILE hyperslab in the chunk*/
 //   filespace = H5Dget_space(dset_u);
	offset[0] = fz_jlo_;	offset[1] = fz_ilo_;	offset[2] = fz_klo_;
	stride[0] = 1; 			stride[1] = 1;			stride[2] = 1;
	count[0]  = fz_jhi_-fz_jlo_+1; 			count[1]  = fz_ihi_-fz_ilo_+1;   		count[2]  = 1; 
	block[0]  = chunk_dims[0]; 		block[1]  = chunk_dims[1];		block[2]  = chunk_dims[2];
//	file_hyper = H5Sselect_hyperslab(filespace, H5S_SELECT_SET, offset, stride, count, block);

	//------------------------------------------------ I/O --------------------------------------------------
	/*Create property list for collective dataset write*/
    plist_id_write = H5Pcreate(H5P_DATASET_XFER);
    H5Pset_dxpl_mpio(plist_id_write, H5FD_MPIO_COLLECTIVE);
  
/*	mem_reader=0;
	for(int i = 0; i < nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1); i++){
		complex_disk_data[i].real = (*(double *)(mem_reader*(ssize_t)sizeof(double)+U_t_));
		mem_reader++;
		complex_disk_data[i].imag = (*(double *)(mem_reader*(ssize_t)sizeof(double)+U_t_));
		mem_reader++;
	}
   	file_hyper = H5Dwrite(dset_u, memtype, memspace, filespace, plist_id_write, complex_disk_data);
*/
    /*Close U resources*/
/*	H5Sclose(filespace);
	H5Dclose(dset_u);
*/    
	//========================================================================================================
	dset_v = H5Dcreate(file_id, field_v, filetype, global_filespace, H5P_DEFAULT, plist_id, H5P_DEFAULT);
	filespace = H5Dget_space(dset_v);
	file_hyper = H5Sselect_hyperslab(filespace, H5S_SELECT_SET, offset, stride, count, block);
	
	mem_reader=0;
	for(int i = 0; i < nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1); i++){
		complex_disk_data[i].real = (*(double *)(mem_reader*(ssize_t)sizeof(double)+V_t_));
		mem_reader++;
		complex_disk_data[i].imag = (*(double *)(mem_reader*(ssize_t)sizeof(double)+V_t_));
		mem_reader++;
	}
    file_hyper = H5Dwrite(dset_v, memtype, memspace, filespace, plist_id_write, complex_disk_data);

	/*Close V resources*/
	H5Sclose(filespace);
	H5Dclose(dset_v);

	//========================================================================================================
/*	dset_w = H5Dcreate(file_id, field_w, filetype, global_filespace, H5P_DEFAULT, plist_id, H5P_DEFAULT);
	filespace = H5Dget_space(dset_w);
	file_hyper = H5Sselect_hyperslab(filespace, H5S_SELECT_SET, offset, stride, count, block);
	
	mem_reader=0;
	for(int i = 0; i < nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1); i++){
		complex_disk_data[i].real = (*(double *)(mem_reader*(ssize_t)sizeof(double)+W_t_));
		mem_reader++;		
		complex_disk_data[i].imag = (*(double *)(mem_reader*(ssize_t)sizeof(double)+W_t_));
		mem_reader++;
		}
    file_hyper = H5Dwrite(dset_w, memtype, memspace, filespace, plist_id_write, complex_disk_data);
*/
	/*Close W resources*/
/*	H5Sclose(filespace);
	H5Dclose(dset_w);
*/	
	//========================================================================================================
	dset_eta = H5Dcreate(file_id, field_eta, filetype, global_filespace, H5P_DEFAULT, plist_id, H5P_DEFAULT);
	filespace = H5Dget_space(dset_eta);
	file_hyper = H5Sselect_hyperslab(filespace, H5S_SELECT_SET, offset, stride, count, block);
	
	mem_reader=0;
	for(int i = 0; i < nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1); i++){
		complex_disk_data[i].real = (*(double *)(mem_reader*(ssize_t)sizeof(double)+eta_write_));
		mem_reader++;		
		complex_disk_data[i].imag = (*(double *)(mem_reader*(ssize_t)sizeof(double)+eta_write_));
		mem_reader++;
		}
    file_hyper = H5Dwrite(dset_eta, memtype, memspace, filespace, plist_id_write, complex_disk_data);

	/*Close W resources*/
	H5Sclose(filespace);
	H5Dclose(dset_eta);

	/*Dataset Attributes*/
	H5LTset_attribute_double(file_id, field_time, "time", &time_, 1);
	H5LTset_attribute_double(file_id, field_time, "nx nz ny", att_modes, dim);
	H5LTset_attribute_double(file_id, field_time, "alpha0", &alfa0_, 1);
	H5LTset_attribute_double(file_id, field_time, "beta0", &beta0_, 1);
	H5LTset_attribute_double(file_id, field_time, "a", &a_, 1);
	H5LTset_attribute_double(file_id, field_time, "ni", &ni , 1);


	
	H5Pclose(plist_id_write);
	H5Tclose(filetype);
	H5Sclose(global_filespace);
	/*Release global resources*/

	MPI_Barrier(MPI_COMM_WORLD);
	H5Gclose(group_id);	
	H5Pclose(plist_id);
	H5Sclose(memspace);
	H5Fclose(file_id);
    
	free(complex_disk_data); *>
	IF rank=0 THEN write_mean_flow
END write_on_disk

SUBROUTINE read_disk
	<*	int nx= nx_+1;	int nz= 2*nz_+1;	int ny=ny_+3;		int size= size_; 	int rank = rank_; 	int file_reader;
	/*HDF5 APIs definitions*/ 		
    hid_t       file_id, dset_u, dset_v, dset_w;          /* file and dataset identifiers */
    hid_t       filespace, memspace, global_filespace;    /* file and memory dataspace identifiers */
	hid_t		plist_id, plist_id_write;		          /* property list identifier */
	hid_t		filetype, memtype;
    hsize_t     dimsf[3], dim_vect[1];    /* dataset dimensions */
    hsize_t     chunk_dims[3];            /* chunk dimensions */
    hsize_t		count[3];	          	  /* hyperslab selection parameters */
    hsize_t		stride[3];
    hsize_t		block[3];
    hsize_t		offset[3];
    herr_t		file_type, mem_type, file_hyper, mem_hyper, status;
	MPI_Info info  = MPI_INFO_NULL;
	char time_str[15], title[15]="";
	gcvt (time_, 10, time_str);
	strcat(time_str,".h5");
	if (rank==0) printf("Reading field from %s/%s\n", output_cwd_,time_str);
	//if( chdir(output_cwd_) !=0 )
	//if( chdir("/media/sf_Materiale_Tesi") !=0 )
		//perror(".:Error changing folder in outstats routine:.");
	//-------------------------------------------- DATATYPE DEF -----------------------------------------------	
	complex *complex_disk_data = (complex*) malloc(nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1)*sizeof(complex));	
	if ( complex_disk_data == NULL) {
		perror(".:Error while allocating complex_disk_data:.\n");	
		abort();
	}	
						
	/*Create FILE Type*/
	filetype = H5Tcreate (H5T_COMPOUND, sizeof (complex));
	file_type = H5Tinsert (filetype, "real", HOFFSET (complex, real), H5T_IEEE_F64LE);
	file_type = H5Tinsert (filetype, "imag", HOFFSET (complex, imag), H5T_IEEE_F64LE);

	/*Create MEMORY Type*/
	memtype = H5Tcreate (H5T_COMPOUND, sizeof (complex));
	mem_type = H5Tinsert (memtype, "real", HOFFSET (complex, real), H5T_NATIVE_DOUBLE);
	mem_type = H5Tinsert (memtype, "imag", HOFFSET (complex, imag), H5T_NATIVE_DOUBLE);

	//------------------------------------------------ MEMORY -------------------------------------------------
	/*Create the dataspace for the MEMORY dataset*/
	memspace = H5Screate_simple(1, dim_vect, NULL);
	/*Set MEMORY hyperslab*/    
	offset[0]  = 0;
	stride[0] = 1;
	count[0]  = nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1);
	block[0]  = 1;
	mem_hyper = H5Sselect_hyperslab(memspace, H5S_SELECT_SET, offset, stride, count, block);

	//------------------------------------------------ FILE --------------------------------------------------
	/*Set up file access property list with parallel I/O access*/
    plist_id = H5Pcreate(H5P_FILE_ACCESS);
    H5Pset_fapl_mpio(plist_id, MPI_COMM_WORLD, info);
    /*Create a new file collectively and release property list identifier*/
    file_id = H5Fopen(time_str, H5F_ACC_RDONLY, plist_id);
    H5Pclose(plist_id);  

    /*Create the FILE chunked dataset*/
	chunk_dims[0] = 1;		chunk_dims[1] = 1;		chunk_dims[2] = nz; 
	dset_u = H5Dopen(file_id, "0/u", H5P_DEFAULT);
    
    /*Set FILE hyperslab in the chunk*/
    filespace = H5Dget_space(dset_u);
	offset[0] = fz_jlo_;	offset[1] = fz_ilo_;	offset[2] = fz_klo_;
	stride[0] = 1; 			stride[1] = 1;			stride[2] = 1;
	count[0]  = fz_jhi_-fz_jlo_+1; 			count[1]  = fz_ihi_-fz_ilo_+1;   		count[2]  = 1; 
	block[0]  = chunk_dims[0]; 		block[1]  = chunk_dims[1];		block[2]  = chunk_dims[2];
	file_hyper = H5Sselect_hyperslab(filespace, H5S_SELECT_SET, offset, stride, count, block);

	//------------------------------------------------ I/O --------------------------------------------------
	/*Create property list for collective dataset write*/
    plist_id_write = H5Pcreate(H5P_DATASET_XFER);
    H5Pset_dxpl_mpio(plist_id_write, H5FD_MPIO_COLLECTIVE);
  
   	file_hyper = H5Dread(dset_u, memtype, memspace, filespace, plist_id_write, complex_disk_data);
	file_reader=0;
	for(int i = 0; i < nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1); i++) {
		(*(double *)(file_reader*(ssize_t)sizeof(double)+U_t_)) = complex_disk_data[i].real;		file_reader++;
		(*(double *)(file_reader*(ssize_t)sizeof(double)+U_t_)) = complex_disk_data[i].imag;		file_reader++;
	} 
    /*Close U resources*/
	H5Sclose(filespace);
	H5Dclose(dset_u);
	
	//=======================================================================================================
	dset_v = H5Dopen(file_id, "0/v", H5P_DEFAULT);
	filespace = H5Dget_space(dset_v);
	file_hyper = H5Sselect_hyperslab(filespace, H5S_SELECT_SET, offset, stride, count, block);

	file_hyper = H5Dread(dset_v, memtype, memspace, filespace, plist_id_write, complex_disk_data);
	file_reader=0;
	for(int i = 0; i < nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1); i++) {
		(*(double *)(file_reader*(ssize_t)sizeof(double)+V_t_)) = complex_disk_data[i].real;		file_reader++;
		(*(double *)(file_reader*(ssize_t)sizeof(double)+V_t_)) = complex_disk_data[i].imag;		file_reader++;
	} 	
    /*Close U resources*/
	H5Sclose(filespace);
	H5Dclose(dset_v);

	//=======================================================================================================
	dset_w = H5Dopen(file_id, "0/w", H5P_DEFAULT);
	filespace = H5Dget_space(dset_w);
	file_hyper = H5Sselect_hyperslab(filespace, H5S_SELECT_SET, offset, stride, count, block);

	file_hyper = H5Dread(dset_w, memtype, memspace, filespace, plist_id_write, complex_disk_data);
	file_reader=0;
	for(int i = 0; i < nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1); i++) {
		(*(double *)(file_reader*(ssize_t)sizeof(double)+W_t_)) = complex_disk_data[i].real;		file_reader++;
		(*(double *)(file_reader*(ssize_t)sizeof(double)+W_t_)) = complex_disk_data[i].imag;		file_reader++;
	} 	
    /*Close U resources*/
	H5Sclose(filespace);
	H5Dclose(dset_w);

	/*Release global resources*/
	MPI_Barrier(MPI_COMM_WORLD);
	H5Pclose(plist_id_write);
	H5Fclose(file_id);
	H5Tclose(filetype);
    H5Sclose(memspace);
	free(complex_disk_data);	*>
END read_disk 

IF generate_inputs = FALSE THEN read_disk

REAL energy, slice_energy, diss, slice_diss, diss_tot, energy_tot, u_fin, w_fin
COMPLEX dudy, dvdy, dwdy
VETA fieldbuf(ilo..ihi,klo..khi,-1..ny+1)
SUBROUTINE outstats
	energy=0; slice_energy=0; diss=0; slice_diss=0
	DO WITH V(ix,iz,iy): 
	slice_energy = ~ + 1/2 * [NORM(u)+NORM(v)+NORM(w)]*[IF ix=0 THEN 1 ELSE 2] *(y(iy+1)-y(iy-1))*0.5 FOR iy=1 TO ny-1 AND ALL ix,iz EXCEPT ix=0 AND iz=0

	LOOP FOR ix=ilo TO ihi AND iz=klo TO khi 
		LOOP FOR iy=1 TO ny-1
			WITH V(ix,iz,*):
			k2 = (alfa0*ix)^2 + (beta0*iz)^2
			dudy = 0.5*[(u(iy+1)-u(iy))/(y(iy+1)-y(iy)) + (u(iy)-u(iy-1))/(y(iy)-y(iy-1))]
			dvdy = 0.5*[(v(iy+1)-v(iy))/(y(iy+1)-y(iy)) + (v(iy)-v(iy-1))/(y(iy)-y(iy-1))]
			dwdy = 0.5*[(w(iy+1)-w(iy))/(y(iy+1)-y(iy)) + (w(iy)-w(iy-1))/(y(iy)-y(iy-1))]
			IF ix=0 THEN 
				IF iz=0 THEN 
					slice_diss = ~ + 0
				ELSE 
					slice_diss = ~ + 0.5*[ k2*(NORM(u(iy))+NORM(v(iy))+NORM(w(iy))) + NORM(dudy)+NORM(dvdy)+NORM(dwdy) ] * (y(iy+1)-y(iy-1))*0.5
				END IF
			ELSE 
				slice_diss = ~ + 2 *0.5*[ k2*(NORM(u(iy))+NORM(v(iy))+NORM(w(iy))) + NORM(dudy)+NORM(dvdy)+NORM(dwdy) ] * (y(iy+1)-y(iy-1))*0.5
			END IF
		REPEAT
	REPEAT

	LOOP FOR ix=ilo TO ihi AND iz=klo TO khi
		IF ix=0 AND iz=0 THEN 
			u_fin=SUM -d14n(i)*V(0,0,ny-1+i).u.REAL FOR i=-2 TO 2
			w_fin=SUM -d14n(i)*V(0,0,ny-1+i).w.REAL FOR i=-2 TO 2
		END IF
	REPEAT LOOP
<*	MPI_Barrier(MPI_COMM_WORLD);
	MPI_Reduce(&slice_diss_, &diss_tot_, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);	MPI_Barrier(MPI_COMM_WORLD);
	MPI_Reduce(&slice_energy_, &energy_tot_, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);	MPI_Barrier(MPI_COMM_WORLD);
	if(rank_== rank_zero_) {
		MPI_Send(&u_fin_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
		MPI_Send(&w_fin_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
		MPI_Send(&u1zero_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
		MPI_Send(&w1zero_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
		MPI_Send(&flowx_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
		MPI_Send(&px_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
		MPI_Send(&corrpx_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
		MPI_Send(&flowz_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
		MPI_Send(&pz_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
		MPI_Send(&corrpz_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
	}
	if(rank_ == 0 ) {
		MPI_Recv(&u_fin_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		MPI_Recv(&w_fin_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		MPI_Recv(&u1zero_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		MPI_Recv(&w1zero_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		MPI_Recv(&flowx_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		MPI_Recv(&px_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		MPI_Recv(&corrpx_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		MPI_Recv(&flowz_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		MPI_Recv(&pz_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		MPI_Recv(&corrpz_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
	} 
	MPI_Barrier(MPI_COMM_WORLD);	*> 
	IF rank=0 THEN
		WRITE time:1.9, u1zero:1.9, u_fin :1.9,
        	w1zero :1.9, ,w_fin :1.9,
			flowx,px+corrpx,flowz,pz+corrpz,deltat,energy_tot,diss_tot
		WRITE TO time_file time:1.9, u1zero:1.9, 
			u_fin :1.9, w1zero :1.9, w_fin :1.9,
			flowx,px+corrpx,flowz,pz+corrpz, , ,deltat,energy_tot,diss_tot; FLUSH(time_file)
	END IF 
	IF time>0 AND FLOOR((time+0.5*deltat)/dt_save) > FLOOR((time-0.5*deltat)/dt_save) THEN
		IF rank=0 THEN WRITE "Writing Field at " time "s"
		!// Generate V_eta array
		LOOP FOR ix=ilo TO ihi AND iz=klo TO khi
			LOOP FOR iy=-1 TO ny+1
				WITH fieldbuf(ix,iz,iy)
		  		v = V(ix,iz,iy).v
		 	 	ialfa = I*alfa0*ix; ibeta = I*beta0*iz
		  		eta = ibeta*V(ix,iz,iy).u - ialfa*V(ix,iz,iy).w
			REPEAT
		REPEAT
		INTEGER counter_buf = 0
		LOOP FOR i=ilo TO ihi
			LOOP FOR k=klo TO khi
				LOOP FOR j=-1 TO ny+1
					eta_write[counter_buf]= fieldbuf(i,k,j).eta.REAL;		v_write[counter_buf]= fieldbuf(i,k,j).v.REAL;		INC counter_buf;
					eta_write[counter_buf]= fieldbuf(i,k,j).eta.IMAG;		v_write[counter_buf]= fieldbuf(i,k,j).v.IMAG;		INC counter_buf;
				REPEAT
			REPEAT
		REPEAT 
		flag_veta=1
	END IF
END outstats
