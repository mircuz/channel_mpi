!//Live post processing routine to use for extra wide simulations 
REALVEL=STRUCTURE(REAL u_p,v_p,w_p)
ARRAY(ilo..ihi, klo..khi,-1..ny+1) OF VELOCITY V_p 
SPECTRUM=STRUCTURE(REAL uu_p,uv_p,uw_p,vv_p,vw_p,ww_p)
DERIVS=STRUCTURE(COMPLEX ux,uy,uz,vx,vy,vz,wx,wy,wz)
DERPRODS=STRUCTURE(COMPLEX ux2,vx2,wx2,uy2,vy2,wy2,uz2,vz2,wz2,uyvx,uzwx,wyvz)

REALVEL mean(-1..ny DIV 2)=0;	REAL u_p_vect(-1..ny DIV 2)=0, v_p_vect(-1..ny DIV 2)=0, w_p_vect(-1..ny DIV 2)=0;	
INTEGER y_dim=HI(mean) - LO(mean)
SPECTRUM rms(-1..ny DIV 2)=0;	REAL uu_vector(-1..ny DIV 2)=0,	global_uu(-1..ny DIV 2)=0
								REAL vv_vector(-1..ny DIV 2)=0,	global_vv(-1..ny DIV 2)=0
								REAL ww_vector(-1..ny DIV 2)=0,	global_ww(-1..ny DIV 2)=0
								REAL uv_vector(-1..ny DIV 2)=0,	global_uv(-1..ny DIV 2)=0
								REAL uw_vector(-1..ny DIV 2)=0,	global_uw(-1..ny DIV 2)=0
								REAL vw_vector(-1..ny DIV 2)=0,	global_vw(-1..ny DIV 2)=0
REAL avfru=0,avfrw=0
REAL uc=0, ut=0

SUBROUTINE post_live
IF time>0 AND FLOOR((time+0.5*deltat)/dt_save) > FLOOR((time-0.5*deltat)/dt_save) THEN 
IF rank = rank_zero THEN
	LOOP FOR iy=mean.LO TO mean.HI WITH mean(iy)
		u_p=1/2*[V(0,0,iy).u.REAL + V(0,0,ny-iy).u.REAL]
		w_p=1/2*[V(0,0,iy).w.REAL + V(0,0,ny-iy).w.REAL] 
	REPEAT
END IF


!//friction at position -1
LOOP FOR ALL ix,iz
	V_p(ix,iz,-1).u= - ( - SUM d140(i)*V(ix,iz,1+i).u FOR i=-2 TO 2)
	V_p(ix,iz,-1).w= - ( - SUM d140(i)*V(ix,iz,1+i).w FOR i=-2 TO 2)
	V_p(ix,iz,ny+1).u= - SUM d14n(i)*V(ix,iz,ny+i-1).u FOR i=-2 TO 2
	V_p(ix,iz,ny+1).w= - SUM d14n(i)*V(ix,iz,ny+i-1).w FOR i=-2 TO 2
REPEAT LOOP

IF rank= rank_zero THEN
		avfru=1/2*[V_p(0,0,-1).u.REAL + V_p(0,0,ny+1).u.REAL]
		avfrw=1/2*[V_p(0,0,-1).w.REAL + V_p(0,0,ny+1).w.REAL] 
END IF

rms = 0 	!//Clean the mem
LOOP FOR iy=rms.LO TO rms.HI WITH rms(iy)   
	LOOP FOR k=klo TO khi
		LOOP FOR i=ilo TO ihi
			IF i=0 THEN
				uu_p=~+1/2*[NORM[V(i,k,iy).u] + NORM[V(i,k,ny-iy).u]]
				vv_p=~+1/2*[NORM[V(i,k,iy).v] + NORM[V(i,k,ny-iy).v]]
				ww_p=~+1/2*[NORM[V(i,k,iy).w] + NORM[V(i,k,ny-iy).w]]
				uv_p=~+1/2*{[V(i,k,iy).u | V(i,k,iy).v].REAL + (-1)*[V(i,k,ny-iy).u | V(i,k,ny-iy).v].REAL}
				uw_p=~+1/2*{[V(i,k,iy).u | V(i,k,iy).w].REAL + [V(i,k,ny-iy).u | V(i,k,ny-iy).w].REAL}
				vw_p=~+1/2*{[V(i,k,iy).v | V(i,k,iy).w].REAL + (-1)*[V(i,k,ny-iy).v | V(i,k,ny-iy).w].REAL}
			ELSE
				uu_p=~+ NORM[V(i,k,iy).u]+ NORM[V(i,k,ny-iy).u]
				vv_p=~+ NORM[V(i,k,iy).v]+ NORM[V(i,k,ny-iy).v]
				ww_p=~+ NORM[V(i,k,iy).w]+ NORM[V(i,k,ny-iy).w]
				uv_p=~+[(V(i,k,iy).u | V(i,k,iy).v).REAL ] - [(V(i,k,ny-iy).u | V(i,k,ny-iy).v).REAL]
				uw_p=~+[(V(i,k,iy).u | V(i,k,iy).w).REAL ] + [(V(i,k,ny-iy).u | V(i,k,ny-iy).w).REAL]
				vw_p=~+[(V(i,k,iy).v | V(i,k,iy).w).REAL ] - [(V(i,k,ny-iy).v | V(i,k,ny-iy).w).REAL]
			END IF		
		REPEAT
	REPEAT
REPEAT LOOP

uu_vector=rms.uu_p;	vv_vector=rms.vv_p;	ww_vector=rms.ww_p;	uv_vector=rms.uv_p;	uw_vector=rms.uw_p;	vw_vector=rms.vw_p;
WRITE

<*	MPI_Reduce(uu_vector_,global_uu_,y_dim_,MPI_DOUBLE,MPI_SUM,0,MPI_COMM_WORLD);
	MPI_Reduce(vv_vector_,global_vv_,y_dim_,MPI_DOUBLE,MPI_SUM,0,MPI_COMM_WORLD);
	MPI_Reduce(ww_vector_,global_ww_,y_dim_,MPI_DOUBLE,MPI_SUM,0,MPI_COMM_WORLD);
	MPI_Reduce(uv_vector_,global_uv_,y_dim_,MPI_DOUBLE,MPI_SUM,0,MPI_COMM_WORLD);
	MPI_Reduce(uw_vector_,global_uw_,y_dim_,MPI_DOUBLE,MPI_SUM,0,MPI_COMM_WORLD);
	MPI_Reduce(vw_vector_,global_vw_,y_dim_,MPI_DOUBLE,MPI_SUM,0,MPI_COMM_WORLD);
	MPI_Barrier(MPI_COMM_WORLD);*>

IF rank=0 THEN 
	WITH rms: 
		uu_p=global_uu;	vv_p=global_vv; ww_p=global_ww; uv_p=global_uv; uw_p=global_uw;	vw_p=global_vw
END IF

IF rank= rank_zero THEN 
	uc=MAX(mean.u_p); 
	ut=SQRT[ni*(SUM d140(i)*mean.u_p(1+i) FOR ALL i)];
	u_p_vect = mean.u_p;	w_p_vect = mean.w_p;	w_p_vect = mean.w_p;
<*	MPI_Send(&uc_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
	MPI_Send(&ut_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
	MPI_Send(&(u_p_vect_[0]),y_dim_,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
	MPI_Send(&(v_p_vect_[0]),y_dim_,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
	MPI_Send(&(w_p_vect_[0]),y_dim_,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
	MPI_Send(&avfru_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD);
	MPI_Send(&avfrw_,1,MPI_DOUBLE,0,0,MPI_COMM_WORLD); *>
END IF

IF rank= 0 THEN 
<*	MPI_Recv(&uc_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
	MPI_Recv(&ut_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
	MPI_Recv(&(u_p_vect_[0]),y_dim_,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
	MPI_Recv(&(v_p_vect_[0]),y_dim_,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
	MPI_Recv(&(w_p_vect_[0]),y_dim_,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
	MPI_Recv(&avfru_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
	MPI_Recv(&avfrw_,1,MPI_DOUBLE,rank_zero_,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE); *>
END IF

<*MPI_Barrier(MPI_COMM_WORLD);*>

IF rank=0 THEN
	mean.u_p = u_p_vect;	mean.v_p = v_p_vect;	mean.w_p = w_p_vect;
END IF
!// Write on files
IF rank=0 THEN
	WRITE "Writing file stats "stats_counter" at time "time
	uc2=uc*uc;ut2=ut*ut
	FILE info_file=CREATE("info"stats_counter".dat")
		WRITE BY NAME TO info_file uc,ut,ut/ni
	CLOSE info_file

	FILE mean_file=CREATE("mean"stats_counter".dat")
		DO WITH mean(iy): 
		WRITE TO mean_file y(iy),y(iy)*ut/ni,u_p,w_p FOR iy=-1 TO ny DIV 2
		WRITE TO mean_file avfru,avfrw
	CLOSE mean_file

	FILE rms_file=CREATE("rms"stats_counter".dat")
	DO WITH rms(iy): 
		WRITE TO rms_file y(iy),y(iy)*ut/ni,uu_p,vv_p,ww_p,uv_p,uw_p,vw_p FOR iy=0 TO ny DIV 2
	CLOSE rms_file

END IF

<*MPI_Barrier(MPI_COMM_WORLD);*>

INC stats_counter
END IF
END post_live
